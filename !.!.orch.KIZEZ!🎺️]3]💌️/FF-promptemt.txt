🛌️🛌️🛌️🛌️🛌️🛌️🛌️🛌️🛌️🛌️
 var dimensions = 4 
  
   char *token = NULL ;
  int word_count = 0;
 
  
////////////
    char buffer[MAX_LENGTH];
    while (fgets(buffer, MAX_LENGTH, fp1) != NULL) {
         token = strtok(buffer, " \n"); // tokenize each word
        while (token != NULL) {
            printf("%s\n", token);
            token = strtok(NULL, " \n"); // get the next token
           word_count++;
        }
    }
    
    rewind(fp1);
  char tokenArray[word_count]; 
  
  while (fgets(buffer, MAX_LENGTH, fp1) != NULL) {
    token = strtok(buffer, " \n"); // tokenize each word
    int i = 0;
    while (token != NULL) {
        printf("%s\n", token);
        tokenArray[i] = strdup(token); // store tokens in tokenArray
        token = strtok(NULL, " \n"); // get the next token
        i++;
    }
    word_count = i; // update word count
}

rewind(fp1);

// print stored tokens for sanity check
for (int i = 0; i < word_count; i++) {
    printf("TokenArray[%d]: %s\n", i, tokenArray[i]);
}

  
append to this code to read tokens from fp1 store tokens in tokenArray
and print for sanity check


calculate 4dimension  w2v word embeddings for each token from fp1 
ex: char w2v[word_count][dimensions]
(print embeddings as checkpoint)


code this in PURE GCC C 
readability rules : [ NEVER use structs, dont use seperate functions, NEVER use nested loops, avoid segfaults];

only show code needed to append
 proceed.   
🛌️🛌️🛌️🛌️🛌️🛌️🛌️

and train learned embeddings for 4 epochs . 
(print learned embeddings as checkpoint)



🗜️
get file pointer for input.txt

input.txt = "<*> i drink and i know things <!>
<*> when you play the game of thrones you win or you die <!>
<*> the true enemy wont wait out the storm he brings the storm <!>"

store in buffer and tokenize each word in buffer (seperated by whitespace, or newline)
store in a char array and print results please. 

then do positional encoding and print results of each token
🗜️
📮️
code this in PURE GCC C 
readability rules : [ NEVER use structs, dont use seperate functions, NEVER use nested loops, avoid segfaults];

 proceed.   


📮️
var dimensions = 4 

  char *token = NULL ;
////////////
    char buffer[MAX_LENGTH];
    while (fgets(buffer, MAX_LENGTH, fp1) != NULL) {
         token = strtok(buffer, " \n"); // tokenize each word
        while (token != NULL) {
            printf("%s\n", token);
            token = strtok(NULL, " \n"); // get the next token
        }
    }

create positional encodings for each word using sine/cosine 
print positional encodings
 
 only show code to append.
proceed
🗜️







//////////////////////////
// Create multi-headed attention mechanism
    for (int h = 0; h < heads; h++) {
    

//> how to train weights on each "heads epoch"
// to learn (from masking / w/e)

    for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
        wq[i][j] = q[i][j] * cos(h * M_PI / heads) * weights[i][j];
        wk[i][j] = k[i][j] * sin(h * M_PI / heads) * weights[i][j];
        wv[i][j] = v[i][j] * weights[i][j];
    }
}

        // Compute attention weights
        double atn[rows][cols];
      
        //w/o dp
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
      
      double masked_weight = 0.0;
if (mask[i][j] == 1.0) {
    masked_weight = atn[i][j] = wq[i][j] * wk[i][j] + 
wv[i][j];
} else {
    atn[i][j] = 0.0; // or some other value, e.g., -inf
}

      
             
            }
        }
        
        // Compute output
     
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                out[i][j] = atn[i][j] * atn[i][j];
            }
        }
        
        
        how would i use the mask to train the weights in this code? back prop ? rl?


//////////////

  double q[rows][cols], k[rows][cols], 
v[rows][cols];
    
create  multiheaded attention 

code this in PURE GCC C 
readability rules : [ NEVER use structs, dont use seperate functions, NEVER use nested loops, avoid segfaults];

 proceed.   

masked





 double weights[rows][cols]; // weights 
      for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            weights[i][j] = rand() / (double)RAND_MAX;
           
        }
    }
    
    // feed foward (without weights) pls add
       for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                wq[i][j] = q[i][j] * cos(h * M_PI / heads);
                wk[i][j] = k[i][j] * sin(h * M_PI / heads);
                wv[i][j] = v[i][j];
            }
        }


where do the weights go in the feed forward code?


///////////////////////////////////
#define LEARNING_RATE 0.1

int activation_fx = 0 ; // or 1


double learning_rate = 0.1;


 for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            b_double[i][j] = rand() / (double)RAND_MAX;
            c_double[i][j] = rand() / (double)RAND_MAX;
        }
    }
   

double a_double[rows][cols]; (assume input values alread exist)
double b_double[rows][cols]; (assume weights are already initialized)
double c_double[rows][cols]; (assume error are already initialized)

TASK : APPEND CODE (ASSUME SETUP CODE ALREADY EXISTS)
apply feedfoward model to a_double 

2d weights are stored in b_double 
and 2d error gradient in c_double

use sigmoid activation


using back propagation to update weights and error gradient


warning: dont reinitialize THE MATRIXS 

📮️
code this in PURE GCC C 
readability rules : [ NEVER use structs, dont use seperate functions, NEVER use nested loops, avoid segfaults];

 proceed.   


if not . what is wrong?

the entire thing should take place in a 4 epochs loop
// may have to do step by step inside epoch ? 

